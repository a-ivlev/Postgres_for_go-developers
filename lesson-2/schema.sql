-- Проект по прокату (краткосрочная аренда) вещей и интструмента. Клиен сервиса может прийти и оформить в аренду нужную ему вещь или инструмент.
-- Клиент выбирает нужную ему вещь, определяет вариант (с оплатой по часам, дням, неделям и т.д.) и срок на который он берёт её в аренду.
-- Можно оформить в аренду несколько вещей, каждая вещь взятая в аренду представляет собой отдельную строку записаную в таблицу (rent_list).
-- Сервис представляет из себя 4 таблицы:
-- таблица аренованых вещей (rent_list) включающая в себя связь с таблицей клиенты (client), с таблицей (item) и с таблицей (rent_price) которая связана с таблицей (item) и в которой
-- содержится информация для каждой позиции таблицы (item) о варианте аренды, и по какой цене за единицу (час, день, неделя и т.д.) её можно оформить в аренду.
-- Таблица (rent_price) связанная с таблицей (items) предоставляет возможность определить для каждой вещи разные варианты аренды с разной стоимостью, так как стоимость аренды зависит от того,
-- какую вещь мы берём в аренду, вариант аренды с (оплатой по часам, дням, неделям и так далее), и на какой срок оформляется аренда.
-- Информация о сроке аренды записывается в таблицу (rent_list) непосредственно во время оформления вещи в аренду.

CREATE TABLE client (
    id serial not null unique,
    first_name varchar(50) not null,
    middle_name varchar(50),
    last_name varchar(50) not null,  
    phone varchar(20) not null unique,
    -- Дата регистрации в сервисе.
    registered_at timestamp default now()

);

CREATE TABLE item (
    id serial not null unique,
    name varchar(255) not null,
    description text,
    -- В это поле записывается расчётное дата и время, когда должна закончиться аренда.
    -- До этой даты и времени оплата произведена во время оформления аренды.
    expires_at timestamp
);

CREATE TABLE rent_price (
    id serial not null unique,
    item_id int not null,
    -- Наименование варианта аренды. Например по часам, дням, неделям и т.д.
    name varchar(255) not null,
    -- Цена аренды за единицу (час, день, неделя и т.д.). Цена аренды храниться в виде целых рублей без копеек. Это помагает нам избежать ошибок при округлении. 
    -- Если в будущем нам понадобиться высокая точность мы с можем без болезненно перевести все цены в копейки.
    price int not null

    CONSTRAINT price_check CHECK (price > 0),
    CONSTRAINT rent_price_item_id FOREIGN KEY (item_id) REFERENCES item (id)
);


CREATE TABLE rent_list (
    id serial not null unique,
    -- Из связанной таблицы (client) выбираем клиета который берёт вещь в аренду.
    client_id int not null,
    -- Из связанной таблицы (item) выбираем вещь которую клиент берёт в аренду.
    item_id int not null,
    -- В это поле записывается информация о стоимости аренды в зависимости от выбранной вещи и варианта аренды этой вещи,
    -- информация берётся для кокретной вещи из связанной таблицы (rent_price), связанной в свою очередь с таблицей (items).
    rent_price_id int not null,
    -- В этом поле определяется срок на который оформляется аренда. 
    duration int not null,
    -- В это поле расчитывается и записывается информация о стоимости аренды в зависимости от выбранного варианта аренды.
    rental_amount int not null,
    -- В это поле автоматически записывается дата и время начала аренды.
    start_rent_at timestamp not null default now(),
    -- В это поле записывается информация о фактической дате и времени завершения аренды (когда клиент вернул вещь взятую в аренду).
    -- И мы можем его сравнить с датой и временем из таблицы (item поле expires_at) когда должна была завершиться аренда.
    end_rent_at timestamp,
    -- В это поле рассчитывается и заноситься информация о необходимости совершения доплаты за аренду, если время завершения аренды было превышено.
    -- Когда (end_rent_at) позже указанной в полеs (expires_at).
    surcharge int,

    CONSTRAINT duration_check CHECK (duration > 0),
    CONSTRAINT rent_list_client_id FOREIGN KEY (client_id) REFERENCES client (id),
    CONSTRAINT rent_list_item_id FOREIGN KEY (item_id) REFERENCES item (id),
    CONSTRAINT rent_list_rent_price_id FOREIGN KEY (rent_price_id) REFERENCES rent_price (id) 
);
